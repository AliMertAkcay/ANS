{
  "hash": "78812f7404db0eb82f49a3ca6e861cca",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Praktische umsetzung von Aktiven Filterschaltungen\nauthor:\n  - name: Ali_Mert_Akcay\n    orcid: 0009-0007-2343-9680\n    corresponding: true\n    email: aakcay@stud.hs-bremen.de\n    roles:\n      - Reschersche\n      - Project administration\n      - Software\n      - Visualization\n    affiliations:\n      - Curvenote\n  - name: Julian Stolle\n    orcid: \n    corresponding: false\n    roles: []\n    affiliations:\n      - Curvenote\n  - name: Erlich\n    orcid:\n    corresponding: false\n    roles: []\n    affiliations:\n      - Curvenote\n\nkeywords:\n  - Operationsverstärker\n  - Aktivefilter\nabstract: |\n  Diese Dokumentation beschäftigt sich mit dem Entwurf eines Aktiven Filters, dessen realisierung aufgrund lage von Operationsverstärkern (Opamps) beschpürochen und gezeigt wird.\nplain-language-summary: |\n  Operationsverstäker sind sogenatne mehrstuffige differenzverstäker die persie die Aufgabe haben die Differenz von zwei signalen zu verstärken hierbei ist es so das die Gleichtakt unterdrückung im idealfall unendlich groß ist so wie die Versträkung so das mann mit dem Operationsverstärker Grundregeln bzw Anahmen rechnen können.\nkey-points:\n  - Hier steht ein Text zum Testen\ndate: last-modified\nbibliography: references.bib\ncitation:\n  container-title: Earth and Space Science\nnumber-sections: true\njupyter: python3\n---\n\n## Biquad Filterschaltung\n\n![Biquadschaltung](images/Biquadschaltung.png){#fig-map}\n\nDie in **Abbildung 1**  gezeigt schaltung wird in diesem Abschnit der Dokumentation behandelt. Es handelt sich hierbei um ein Universellen Biquad Filter welcher 4 Filter Typen in einem Realisiert. Eine wichtiger Parameter von Filtern ist die Güte dies lässt sich mit dem Widerstand R5 einstellen. Bei steigender güte sinkt je nach Filter Type entweder die Bandbreite z.B. beim Notchfilter (bandsperre) oder beim Bandpass und beim Tiefpassfilter bzw Hochapssfilter die Übergangsfrequenz sprich die breite.\n\n::: {#01638884 .cell execution_count=1}\n``` {.python .cell-code .hidden}\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom ltspice import Ltspice\nimport pandas as pd\n```\n:::\n\n\n::: {#ec5472ec .cell execution_count=2}\n``` {.python .cell-code .hidden}\n#Messwerte Tiefpassfilter mit Q1\ndfLPFQ1 = pd.read_csv(\"./Data/Messung1_LPF.csv\",sep=',')\nfTPQ1 = np.array(dfLPFQ1['Frequency [Hz]'])\ngainTPQ1=np.array(dfLPFQ1[' Amplitude [dB]'])\nphaseTPQ1 = np.array(dfLPFQ1[' Phase [deg]'])\n\n#Messwerte Tiefpassfilter mit Q10\ndfLPFQ10 = pd.read_csv(\"./Data/Messung2_LPF.csv\",sep=',')\nfTPQ10 = np.array(dfLPFQ10['Frequency [Hz]'])\ngainTPQ10=np.array(dfLPFQ10[' Amplitude [dB]'])\nphaseTPQ10 = np.array(dfLPFQ10[' Phase [deg]'])\n\n#Messwerte Hochpassfilter mit Q1\ndfHPFQ1 = pd.read_csv(\"./Data/Messung1_HPF.csv\",sep=',')\nfHPFQ1 = np.array(dfHPFQ1['Frequency [Hz]'])\ngainHPFQ1=np.array(dfHPFQ1[' Amplitude [dB]'])\nphaseHPFQ1 = np.array(dfHPFQ1[' Phase [deg]'])\n\n#Messwerte Hochpassfilter mit Q10\ndfHPFQ10 = pd.read_csv(\"./Data/Messung2_HPF.csv\",sep=',')\nfHPFQ10 = np.array(dfHPFQ10['Frequency [Hz]'])\ngainHPFQ10=np.array(dfHPFQ10[' Amplitude [dB]'])\nphaseHPFQ10 = np.array(dfHPFQ10[' Phase [deg]'])\n\n#Messwerte Bandpassfilter mit Q1\ndfBPFQ1 = pd.read_csv(\"./Data/Messung1_BPF.csv\",sep=',')\nfBPFQ1 = np.array(dfBPFQ1['Frequency [Hz]'])\ngainBPFQ1=np.array(dfBPFQ1[' Amplitude [dB]'])\nphaseBPFQ1 = np.array(dfBPFQ1[' Phase [deg]'])\n\n#Messwerte Bandpassfilter mit Q10\ndfBPFQ10 = pd.read_csv(\"./Data/Messung2_BPF.csv\",sep=',')\nfBPFQ10 = np.array(dfBPFQ10['Frequency [Hz]'])\ngainBPFQ10=np.array(dfBPFQ10[' Amplitude [dB]'])\nphaseBPFQ10 = np.array(dfBPFQ10[' Phase [deg]'])\n\n#Messwerte Bandsperre mit Q1\ndfBSFQ1 = pd.read_csv(\"./Data/Messung1_BSF.csv\",sep=',')\nfBSFQ1 = np.array(dfBSFQ1['Frequency [Hz]'])\ngainBSFQ1=np.array(dfBSFQ1[' Amplitude [dB]'])\nphaseBSFQ1 = np.array(dfBSFQ1[' Phase [deg]'])\n\n#Messwerte Bandsperre mit Q10\ndfBSFQ10 = pd.read_csv(\"./Data/Messung2_BSF.csv\",sep=',')\nfBSFQ10 = np.array(dfBSFQ10['Frequency [Hz]'])\ngainBSFQ10=np.array(dfBSFQ10[' Amplitude [dB]'])\nphaseBSFQ10 = np.array(dfBSFQ10[' Phase [deg]'])\n\n```\n:::\n\n\n::: {#a8c7567a .cell execution_count=3}\n``` {.python .cell-code .hidden}\n# -----------------------------------Einladen der Simulations Werte -----------------------------------------\n# Werte für die Tiefpassfilter mit güte 1\nfilepath1 = './spice_kicad/FSQ1.raw'\nl1 = Ltspice(filepath1)\nl1.parse() # Data loading sequence. It may take few minutes for huge file.\n\nf1 = l1.get_frequency()\nVbpf1 = l1.get_data('v(bpf)')\nVbsf1 = l1.get_data('v(bsf)')\nVhpf1 = l1.get_data('v(hpf)')\nVlpf1 = l1.get_data('v(lpf)')\n\n# Werte für die Tiefpassfilter mit güte 10\n\nfilepath10 = './spice_kicad/FSQ10.raw'\nl2 = Ltspice(filepath10)\nl2.parse()\n\nf2 = l2.get_frequency()\nVbpf10 = l2.get_data('v(bpf)')\nVbsf10 = l2.get_data('v(bsf)')\nVhpf10 = l2.get_data('v(hpf)')#https://www.ti.com/lit/ds/symlink tl082-n.pdf\nVlpf10 = l2.get_data('v(lpf)')\n```\n:::\n\n\n:::{#bb5f03e0 .cell .markdown}\n## Vergleich der Messwerte mit den Simulationswerten\n\n\n### Tiefpassfilter\n:::\n\n::: {#f97bcfa3 .cell execution_count=4}\n``` {.python .cell-code .hidden}\nplt.figure(\"Amplitudengang des Tiefpass filters\")\nplt.title(\"Amplitudengang des Tiefpassfilters\")\nplt.plot(f1,20*np.log10(abs(Vlpf1)),\".:\",label=\"Q1 TP Simulation\")\nplt.plot(f2,20*np.log10(abs(Vlpf10)),\".:\",label=\"Q10 TP Simulation\")\nplt.plot(fTPQ1,gainTPQ1,label='Tiefpassfilter gemessen Q1')\nplt.plot(fTPQ10,gainTPQ10,label='Tiefpassfilter gemessen Q10')\nplt.xscale('log')\nplt.grid()\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){}\n:::\n:::\n\n\n:::{#3a42b0cc .cell .markdown}\n## Vergleich der Messwerte mit den Simulationswerten\nVergleicht man die in Abbildung 2 abgebildeten Amplitudengände des Tiefpassfilters, erkennt man ab ca. 10kHz bei Güte 1, bzw. 50kHz bei Güte 10, Abweichungen der gemessenen zu der theoretischen Simulation aus KiCad. Bei höheren Frequenzen kommen mehrerere Faktoren zusammen, die das ideale Verhalten beeinträchtigen:\n    - Parasitäre Effekte: Bei den theoretischen Modellen werden   die Streukapazitäten und -induktivitäten, die in den realen Bauelementen vorhanden sind, nicht berücksichtigt. Diese parasiäten Effekten werden aber bei hohen Frequenzen zunehmend relevant und könnten einer der Faktoren der Abweichungen sein.\n    - Frequenzabhängiges Bauteilverhalten: Mit steigender Frequenz sinkt der Widerstand vom Kondensator. Bei steigender Frequenz ändert sich damit das Spannungsverhältnis, was zu Abweichungen führt.\n    - Nicht-idealen Eigenschaften eines OpAmps: Zum Beispiel die endliche Verstärkung, Offsetspannungen und Eingangs-Bias-Ströme, haben potenziell die größten Auswirkungen auf die Leistung eines Biquad-Filters. Diese Fehlerquellen können zu Verzerrungen, Verlust der Genauigkeit und Fehlern in der Frequenzgangkurve führen. Besonders bei präzisen Filtern und Anwendungen, die eine exakte Frequenzantwort erfordern (z. B. Audio- oder Kommunikationssysteme), müssen diese nicht-idealen Effekte berücksichtigt und in der Schaltungs- oder Filtergestaltung ausgeglichen werden.Um diese Probleme zu minimieren, wird in der Praxis häufig Präzisions-OpAmps verwendet, die geringe Fehlerquellen aufweise\n\n### Dokumentierte Abweichungen\nIn den Versuchsergebnissen wurden bereits erhebliche Abweichungen zwischen berechneten und gemessenen Werten dokumentiert:\n    - Die Abweichungen der Grenzfrequenz beträgt 1,57kHz bzw. 15,8%\n    - Die absolute Abweichung zwischen ReÜberschwingen im Übergangsbereich: Im Bereich um 1000 Hz zeigt insbesondere die Q10-Simulation (orange) ein deutliches Überschwingen, das beim Q10-Wert mit seiner steileren Flankensteilheit zu erwarten ist\n    \n### Spezielle Effekte bei hohen Frequenzen\nBei Frequenzen deutlich über der Grenzfrequenz kommen zusätzliche Effekte zum Tragen:\n    - Die Filtersteilheit realer Filter kann von den theoretischen abweichen.\n    - Belastungseffekte durch nachfolgeden Stufen verändern die Filtercharakteristik. Wenn beispielsweise ein Hochpass an einen Tiefpass angeschlossen wird, verändert sich das Übertragungsverhalten durch die Parallelschaltung.\nDiese Beobachtungen decken sich mit der Grafik, die deutliche Unterschiede zwischen Suimulation und Messung im Breich ab 10kHz zeigt, insbesondere bei der Tiefe der Dämpfungskurve und dem erneuten Anstieg bei sehr hohen Frequenzen.\n:::\n\n::: {#e11599b9 .cell execution_count=5}\n``` {.python .cell-code .hidden}\nplt.figure(\"Phasengang des Tiefpass filters\")\nplt.title(\"Phasengang des Tiefpass filters\")\nplt.plot(f1,np.degrees(np.angle(Vlpf1)),\".:\",label=\"Q1 TP Simulation\")\nplt.plot(f2,np.degrees(np.angle(Vlpf10)),\".:\",label=\"Q10 TP Simulation\")\nplt.plot(fTPQ1,phaseTPQ1,\".:\",label='Tiefpassfilter gemessen Q1')\nplt.plot(fTPQ10,phaseTPQ10,\".:\",label='Tiefpassfilter gemessen Q10')\nplt.xscale('log')\nplt.grid()\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){}\n:::\n:::\n\n\n:::{#e04146fb .cell .markdown}\n### Hochpassfilter\n:::\n\n::: {#4275b161 .cell execution_count=6}\n``` {.python .cell-code .hidden}\nplt.figure(\"Amplitudengang des Hochpassfilters\")\nplt.title(\"Amplitudengang des Hochpassfilters\")\nplt.plot(f1,20*np.log10(abs(Vhpf1)),\".:\",label=\"Q1 HP Simulation\")\nplt.plot(f2,20*np.log10(abs(Vhpf10)),\".:\",label=\"Q10 HP Simulation\")\nplt.plot(fHPFQ1,gainHPFQ1,label='Hochpassfilter gemessen Q1')\nplt.plot(fHPFQ10,gainHPFQ10,label='Hochpassfilter gemessen Q10')\nplt.xscale('log')\nplt.grid()\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-1.png){}\n:::\n:::\n\n\n:::{#37857b9d .cell .markdown}\n## Vergleich der Messwerte mit den Simulationswerten\nBei den Amplitudengänge des Hochpassfilters aus Abbildung 4 gibt es ähnliche Gründe für die Abweichungen wie beim Tiefpassfilter, aber mit dem Unterschied, dass sie hier bei sehr niedrigen Frequenzen und ebenfalls sehr niedrigen dB-Werten auftreten. Dabei gibt es mehrere Faktoren, die diese Abweichungen erklären:\n    - Reales Verhalten der Bauelemente: Bei extrem niedrigen Frequenzen verhalten sich Kondensatoren nicht mehr ideal. Während ein idealer Kondensator bei sehr niedrigen Frequenzen wie eine vollständige Sperre wirken sollte, haben reale Kondensatoren Leckströme, die einen gewissen Signaldurchlass ermöglichen\n    - Parasitäre Effekte: Reale Bauteile besitzen Parallelwiderstände, die besonders bei niedrigen Frequenzen zum Tragen kommen. Bei Kondensatoren führt dies dazu, dass sie nicht mehr als perfekte Isolatoren wirken\n    - Rauscheffekte und Messgenauigkeit: Bei sehr niedirgen dB-Werten (unter -80dB) stoßen Messgeräte an ihre Grenzen, was zu unregelmäßigen Messergebnissen führen kann.\n\n### Dokumentierte Abweichungen\nIm angezeigten Amplitudengang des Hochpassfilters sind mehrere charakteristische Abweichungen erkennbar:\n    - Starker Einbruch bei Q1-Messung: Die rote Linie (gemessener Q1-Hochpass) zeigt bei etwa 20-30 Hz einen markanten Einbruch auf fast -110 dB, der in der Simulation nicht vorkommt. Dies deutet auf resonante Effekte zwischen den realen Bauteilen hin\n    - Flacherer Anstieg bei niedrigen Frequenzen: Der Anstieg der gemessenen Kurven (rot und grün) ist bei sehr niedrigen Frequenzen weniger steil als bei den simulierten Kurven, was auf die nicht-idealen Eigenschaften der Bauelemente zurückzuführen ist\n    - Überschwingen im Übergangsbereich: Im Bereich um 1000 Hz zeigt insbesondere die Q10-Simulation (orange) ein deutliches Überschwingen, das beim Q10-Wert mit seiner steileren Flankensteilheit zu erwarten ist\n:::\n\n::: {#64e7c8d4 .cell execution_count=7}\n``` {.python .cell-code .hidden}\nplt.figure(\"Phasengang des Hochpassfilters\")\nplt.title(\"Phasengang des Hochpassfilters\")\nplt.plot(f1,np.degrees(np.angle(Vhpf1)),\".:\",label=\"Q1 HP Simulation\")\nplt.plot(f2,np.degrees(np.angle(Vhpf10)),\".:\",label=\"Q10 HP Simulation\")\nplt.plot(fHPFQ1,phaseHPFQ1,label='Hochpassfilter gemessen Q1')\nplt.plot(fHPFQ10,phaseHPFQ10,label='Hochpassfilter gemessen Q10')\nplt.xscale('log')\nplt.grid()\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-1.png){}\n:::\n:::\n\n\n:::{#5a3a525d .cell .markdown}\n### Bandpassfilter\n:::\n\n::: {#e97b869e .cell execution_count=8}\n``` {.python .cell-code .hidden}\nplt.figure(\"Amplitudengang des Bandpassfilters\")\nplt.title(\"Amplitudengang des Bandpassfilters\")\nplt.plot(f1,20*np.log10(abs(Vbpf1)),\".:\",label=\"https://www.ti.com/lit/ds/symlink/tl082-n.pdfQ1 BPF Simulation\")\nplt.plot(f2,20*np.log10(abs(Vbpf10)),\".:\",label=\"Q10 BPF Simulation\")\nplt.plot(fBPFQ1,gainBPFQ1,label='Bandpassfilter gemessen Q1')\nplt.plot(fBPFQ10,gainBPFQ10,label='Bandpassfilter gemessen Q10')\nplt.xscale('log')\nplt.grid()\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-1.png){}\n:::\n:::\n\n\n::: {#7e960d62 .cell execution_count=9}\n``` {.python .cell-code .hidden}\nplt.figure(\"Phasengang des Bandpassfilters\")\nplt.title(\"Phasengang des Bandpassfilters\")\nplt.plot(f1,np.degrees(np.angle(Vbpf1)),\".:\",label=\"Q1 BPF Simulation\")\nplt.plot(f2,np.degrees(np.angle(Vbpf10)),\".:\",label=\"Q10 BPF Simulation\")\nplt.plot(fBPFQ1,phaseBPFQ1,label='Bandpassfilter gemessen Q1')\nplt.plot(fBPFQ10,phaseBPFQ10,label='Bandpassfilter gemessen Q10')\nplt.xscale('log')\nplt.grid()\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-10-output-1.png){}\n:::\n:::\n\n\n:::{#8a339041 .cell .markdown}\n### Bandstopfilter\n:::\n\n::: {#4c041981 .cell execution_count=10}\n``` {.python .cell-code .hidden}\nplt.figure(\"Amplitudengang des Bandstopfilters\")\nplt.title(\"Amplitudengang des Bandstopfilters\")\nplt.plot(f1,20*np.log10(abs(Vbsf1)),\".:\",label=\"Q1 BSF Simulation\")\nplt.plot(f2,20*np.log10(abs(Vbsf10)),\".:\",label=\"Q10 BSF Simulation\")\nplt.plot(fBSFQ1,gainBSFQ1,label='Bandstopfilter gemessen Q1')\nplt.plot(fBSFQ10,gainBSFQ10,label='Bandstopfilter gemessen Q10')\nplt.xscale('log')\nplt.grid()\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-1.png){}\n:::\n:::\n\n\n::: {#2bdee07d .cell execution_count=11}\n``` {.python .cell-code .hidden}\nplt.figure(\"Phasengang des Bandstopfilters\")\nplt.title(\"Phasengang des Bandstopfilters\")\nplt.plot(f1,np.degrees(np.angle(Vbsf1)),\".:\",label=\"Q1 BSF Simulation\")\nplt.plot(f2,np.degrees(np.angle(Vbsf10)),\".:\",label=\"Q10 BSF Simulation\")\nplt.plot(fBSFQ1,phaseBSFQ1,label='Bandstopfilter gemessen Q1')\nplt.plot(fBSFQ10,phaseBSFQ10,label='Bandstopfilter gemessen Q10')\nplt.xscale('log')\nplt.grid()\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-12-output-1.png){}\n:::\n:::\n\n\n:::{#13a770e2 .cell .markdown}\nDie Güte hat ein Problem in der Rellen Schaltung\n\n# Butterworthfilter \n:::\n\n::: {#7c8f6857 .cell execution_count=12}\n``` {.python .cell-code .hidden}\n# Einladen der Messwerte\n# ----- Butter1uF ------------- \nButter1uF = pd.read_csv(\"./Data/4.5_1uF_Data.csv\",sep=',')\nfButter1uf = np.array(Butter1uF['Frequency [Hz]'])\ngain1uf=np.array(Butter1uF[' Amplitude [dB]'])\nphase1uf = np.array(Butter1uF[' Phase [deg]'])\n\n# ------Butter 0.1 uF ---------- \nButter01uF = pd.read_csv(\"./Data/4.5_0.1uF_Data.csv\",sep=',')\nfButter01uf = np.array(Butter01uF['Frequency [Hz]'])\ngain01uf=np.array(Butter01uF[' Amplitude [dB]'])\nphase01uf = np.array(Butter01uF[' Phase [deg]'])\n\n# ------Butter 0.01uF -------- f0 = \nButter001uF = pd.read_csv(\"./Data/4.5_0.01uf_Data.csv\",sep=',')\nfButter001uf = np.array(Butter001uF['Frequency [Hz]'])\ngain001uf=np.array(Butter001uF[' Amplitude [dB]'])\nphase001uf = np.array(Butter001uF[' Phase [deg]'])\n```\n:::\n\n\n::: {#6566e57c .cell execution_count=13}\n``` {.python .cell-code .hidden}\n# Einladen der Simuliertenwerte\n\n# Werte aus der Simulation mit 1 uF  \nfilepath3 = './spice_kicad/Butterworththirdorder1u.raw'\nl3 = Ltspice(filepath3)\nl3.parse() # Data loading sequence. It may take few minutes for huge file.\n\nf3 = l3.get_frequency()\nVbpf3 = l3.get_data('v(bpf)')\nVbsf3 = l3.get_data('v(bsf)')\nVhpf3 = l3.get_data('v(hpf)')\nVlpf3 = l3.get_data('v(lpf)')\nVout1u  = l3.get_data('v(Vout)') \n\n# Werte aus der Simulation mit 0.1 uF\n\nfilepath4 = './spice_kicad/Butterworththirdorder0.1u.raw'\nl4 = Ltspice(filepath4)\nl4.parse() # Data loading sequence. It may take few minutes for huge file.\n\nf4 = l4.get_frequency()\nVbpf4 = l4.get_data('v(bpf)')\nVbsf4 = l4.get_data('v(bsf)')\nVhpf4 = l4.get_data('v(hpf)')\nVlpf4 = l4.get_data('v(lpf)')\nVout01u  = l4.get_data('v(Vout)') \n\n# Werte aus der Simulation mit 0.01 uF\n\nfilepath5 = './spice_kicad/Butterworththirdorder0.01u.raw'\nl5 = Ltspice(filepath5)\nl5.parse() # Data loading sequence. It may take few minutes for huge file.\n\nf5 = l5.get_frequency()\nVbpf5 = l5.get_data('v(bpf)')\nVbsf5 = l5.get_data('v(bsf)')\nVhpf5 = l5.get_data('v(hpf)')\nVlpf5 = l5.get_data('v(lpf)')\nVout001u  = l5.get_data('v(Vout)') \n```\n:::\n\n\n:::{#ed27ea1b .cell .markdown}\n## Plot und Vergleich:\n\n### Butterworth 1uF\n:::\n\n::: {#b4f57127 .cell execution_count=14}\n``` {.python .cell-code .hidden}\nplt.figure(\"Amplitudengang Butterworth TP 1uF\")\nplt.title(\"Amplitudengang Butterworth 1uF\")\nplt.plot(f3,20*np.log10(abs(Vout1u)),\".:\",label=\"Simulation\")\nplt.plot(fButter1uf,gain1uf,label='Tiefpassfilter gemessen')\nplt.xscale('log')\nplt.grid()\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-15-output-1.png){}\n:::\n:::\n\n\n::: {#e5be087f .cell execution_count=15}\n``` {.python .cell-code .hidden}\nplt.figure(\"Phasengang Butterworth TP 1uF\")\nplt.title(\"Phasengang Butterworth 1uF\")\nplt.plot(f3,np.degrees(np.angle(Vout1u)),\".:\",label=\"Simulation\")\nplt.plot(fButter1uf,phase1uf,label='Butterworth gemessen')\nplt.xscale('log')\nplt.grid()\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-16-output-1.png){}\n:::\n:::\n\n\n:::{#009bffac .cell .markdown}\n### Butterworthfilter 0.1uF\n:::\n\n::: {#f3815c39 .cell execution_count=16}\n``` {.python .cell-code .hidden}\nplt.figure(\"Amplitudengang Butterworth TP 0.1uF\")\nplt.title(\"Amplitudengang Butterworth 0.1uF\")\nplt.plot(f4,20*np.log10(abs(Vout01u)),\".:\",label=\"Simulation\")\nplt.plot(fButter01uf,gain01uf,label='Tiefpassfilter gemessen')\nplt.xscale('log')\nplt.grid()\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-17-output-1.png){}\n:::\n:::\n\n\n::: {#ccd71ce0 .cell execution_count=17}\n``` {.python .cell-code .hidden}\nplt.figure(\"Phasengang Butterworth TP 0.1uF\")\nplt.title(\"Phasengang Butterworth 0.1uF\")\nplt.plot(f4,np.degrees(np.angle(Vout01u)),\".:\",label=\"Simulation\")\nplt.plot(fButter01uf,phase01uf,label='Butterworth gemessen')\nplt.xscale('log')\nplt.grid()\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-18-output-1.png){}\n:::\n:::\n\n\n:::{#a67e121a .cell .markdown}\n# Butterworthfilter 0.01uF\n:::\n\n::: {#60f6fb45 .cell execution_count=18}\n``` {.python .cell-code .hidden}\nplt.figure(\"Amplitudengang Butterworth TP 0.01uF\")\nplt.title(\"Amplitudengang Butterworth 0.01uF\")\nplt.plot(f5,20*np.log10(abs(Vout001u)),\".:\",label=\"Simulation\")\nplt.plot(fButter001uf,gain001uf,label='Tiefpassfilter gemessen')\nplt.xscale('log')\nplt.grid()\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-19-output-1.png){}\n:::\n:::\n\n\n::: {#590be714 .cell execution_count=19}\n``` {.python .cell-code .hidden}\nplt.figure(\"Phasengang Butterworth TP 0.01uF\")\nplt.title(\"Phasengang Butterworth 0.01uF\")\nplt.plot(f5,np.degrees(np.angle(Vout001u)),\".:\",label=\"Simulation\")\nplt.plot(fButter001uf,phase001uf,label='Butterworth gemessen')\nplt.xscale('log')\nplt.grid()\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-20-output-1.png){}\n:::\n:::\n\n\n:::{#943cd40c .cell .markdown}\n::: {#refs}\n:::\n:::\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}