{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Alle Messwert der PCB_Schaltung"
      ],
      "id": "a92c7210"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import scipy.signal as sig\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "kondensatoren = [\"1uF\",\"100nF\",\"10nF\"]\n",
        "\n",
        "guete = [\"1Q\",\"10Q\"]\n",
        "\n",
        "messung = [\"BPF2\",\"LPF2\",\"HPF2\",\"BSF2\",\"LPF3\"]\n",
        "\n",
        "Anzahl = len(kondensatoren)*len(guete)*len(messung)\n",
        "\n",
        "for f,cwert in enumerate(kondensatoren):\n",
        "    for s,gueteval in enumerate(guete):\n",
        "        for i,FilterTyp in enumerate(messung):\n",
        "            \n",
        "            # Vergleich mit scipy Aus den jeweiligen übertragungsfunktionen\n",
        "            #TODO: Das hier noch machen\n",
        "            # Filterparameter\n",
        "            #order = 3\n",
        "            \n",
        "           #R = 1000\n",
        "            #cwertnum = np.array([1e-6,0.1e-6,0.01e-6])\n",
        "            #Wc =   1/(R*cwertnum) # Cutoff frequency in rad/s\n",
        "\n",
        "            #fs = 10000 # Sampling frequency in Hz (nur relevant für digital)\n",
        "\n",
        "            # Butterworth Biquad (analog)\n",
        "            #b, a = signal.butter(N=order, Wn=Wc, btype='low', analog=True)\n",
        "\n",
        "            # Übertragungsfunktion anzeigen\n",
        "            #print(\"Zählerkoeffizienten (b):\", b)\n",
        "            #print(\"Nennerkoeffizienten (a):\", a)\n",
        "\n",
        "            # Bode-Diagramm\n",
        "            #w, h = signal.freqs(1*b, a)\n",
        "            \n",
        "            #plt.figure()\n",
        "            #frequenzgang = 20 * np.log10(abs(h))\n",
        "            #frequenzgangmitf = np.vstack((frequenzgang,w / (2*np.pi)))\n",
        "            #plt.semilogx(w / (2*np.pi), frequenzgang)\n",
        "            #plt.title('3nd Order Butterworth Low Pass Filter')\n",
        "            #plt.xlabel('Frequency [Hz]')\n",
        "            #plt.ylabel('Amplitude [dB]')\n",
        "            #plt.grid()\n",
        "            #plt.show()\n",
        "\n",
        "            # Auswertung für die Messung\n",
        "            #AktuelleFilter = FilterTyp+\"_\"+gueteval+\"_\"+cwert\n",
        "            \n",
        "            AktuelleFilter = FilterTyp+\"_\"+cwert+\"_\"+gueteval\n",
        "            \n",
        "            Data_IN1 = './MessungenPCB/'+AktuelleFilter+\".csv\"\n",
        "            Data_IN2 = './MessungenPCB/'+AktuelleFilter+\".csv\"\n",
        "\n",
        "            DF_IN1 = pd.read_csv(Data_IN1)\n",
        "            DF_IN2 = pd.read_csv(Data_IN2)\n",
        "\n",
        "            MAG_dB = DF_IN1[\" Amplitude [dB]\"]\n",
        "            PHASE_deg = DF_IN1[\" Phase [deg]\"]\n",
        "            freqsfloat = DF_IN1[\"Frequency [Hz]\"]\n",
        "\n",
        "            plt.figure(AktuelleFilter)\n",
        "            plt.subplot(2, 1, 1)\n",
        "            plt.title(AktuelleFilter)\n",
        "            #plt.semilogx(freqs, MAG_dB)\n",
        "            plt.plot(freqsfloat,MAG_dB)\n",
        "            plt.xscale('log')\n",
        "            plt.grid()\n",
        "            plt.ylabel('Magnitude in dB')\n",
        "            #\n",
        "            plt.subplot(2, 1, 2)\n",
        "            #plt.semilogx(freqs, PHASE_deg)\n",
        "            plt.plot(freqsfloat, PHASE_deg)\n",
        "            plt.xscale('log')\n",
        "            plt.grid()\n",
        "            plt.xlabel('f in Hz')\n",
        "            plt.ylabel('Phase in deg')\n",
        "            plt.savefig(\"./MessungenPCB/Figs/\"+AktuelleFilter+\".png\")\n",
        "plt.show()"
      ],
      "id": "a01d0697",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\julia\\Documents\\venv311\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}