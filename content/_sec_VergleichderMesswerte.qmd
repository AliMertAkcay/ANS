# Vergleich der unterschiedlichen Messungen

## Messverfahren
Die Messung der Biquad-Schaltung erfolgt auf zwei Wegen: Einerseits über die grafische Benutzeroberfläche und andererseits durch das erweiterte Python-Messskript von Prof. Dr.-Ing. Mirco Meiners für den Red Pitaya.

<!-- Um den Freqeunzgang der Schaltung zu ermitteln wurde die messung durch die Graphische oberfläche durchgeführt hier zu muss der Readpitaya wie in @fig-Readpitayaverschaltung gezeigt geschaltet werden. -->

Um den Frequenzgang der Schaltung zu ermitteln, wurde die Messung über die grafische Oberfläche durchgeführt. Hierzu muss der Readpitaya wie in der Abbildung @fig-Readpitayaverschaltung dargestellt geschaltet werden.

![Readpitaya Verschaltung](images/Bodemessung.png){#fig-Readpitayaverschaltung}

<!--Compiler?Was los??-->

### Messautomatisierung
<!-- Auf grund dessen das die Erweiterte Biquadschaltung mit Butterworth dritter Ordnung sehr viele Messungen benötigt um alle Filtertypen abzudecken mit den jeweiligen einstellungen. Wurde des Messskript um for-schleifen erweitert. In der Praxis hat sich jedoch rausgestellt das die Messung im allgemeinen länger dauer als die Über die Graphische Oberfläche dem entsprechend wurde die Idee für eine Voll automatisierte Messung verforven und stattdessen wurde die messung Händisch über die Graphische Oberfläche weiter mit hilfe eines Messprotokoll weiter geführt. -->

<!-- Aufgrund der vielen benötigten Messungen, um alle Filtertypen mit den jeweiligen Einstellungen abzudecken, wurde das Messskript erweitert Deshalb wurde das Messskript um For-Schleifen erweitert. In der Praxis hat sich jedoch herausgestellt, dass die Messung im Allgemeinen länger dauert als die Messung über die grafische Oberfläche. Entsprechend wurde die Idee für eine vollautomatisierte Messung verworfen und die Messung stattdessen händisch über die grafische Oberfläche mit Hilfe eines Messprotokolls weitergeführt. -->

Um alle Filtertypen mit den jeweiligen Einstellungen abzudecken, sind viele Messungen erforderlich. Deshalb wurde das Messskript um For-Schleifen erweitert. In der Praxis hat sich jedoch herausgestellt, dass die Messautomatisierung im Allgemeinen länger dauert als die Messung über die grafische Oberfläche. Die Idee für eine vollautomatisierte Messung wurde entsprechend verworfen und die Messung stattdessen manuell über die grafische Oberfläche mithilfe eines Messprotokolls fortgeführt.
<!--Test-->

## Messwerte der Diskretenschaltung
<!--TEst-->
<!-- Bevor der Biquad von der diskreten Schaltungsebene auf die PCB-Schaltungsebene übertragen werden kann, muss die diskrete Schaltung verifiziert werden. Hierzu wurden folgende Messungen durchgeführt: -->

Bevor der Biquad von der diskreten Schaltungsebene auf die PCB-Schaltungsebene übertragen werden kann, muss die diskrete Schaltung zunächst verifiziert werden. Hierzu wurden folgende Messungen durchgeführt, die für einen Kondensatorwert von 1 µF bzw. 0,1 µF gelten und entsprechend die in @tbl-Passbandedge aufgelisteten Passbandedgefrequenzen haben.

::: {.table #tbl-Passbandedge tbl-cap="Verwendete Komponenten und dessen Grenzfrequenzen des Durchlassbereichs"}

|           | $f_0 = 159.155$  | $f_0 = 1591.55$  | $f_0 =15915.494$   |
|-----------|------------------|------------------|--------------------|
| $R_{com}$ |   $1k\Omega$     |   $1k\Omega$     |    $1k\Omega$      |
| $C_{com}$ |   $1\mu F$       |   $0.1 \mu F$    |   $0.01 \mu F$     |

:::
```{python}
import matplotlib.pyplot as plt
import numpy as np
from ltspice import Ltspice
import pandas as pd
```

```{python}
# Messwerte Tiefpassfilter mit Q1
dfLPFQ1 = pd.read_csv("Data/Messung1_LPF.csv", sep=',')
fTPQ1 = np.array(dfLPFQ1['Frequency [Hz]'])
gainTPQ1=np.array(dfLPFQ1[' Amplitude [dB]'])
phaseTPQ1 = np.array(dfLPFQ1[' Phase [deg]'])

# Messwerte Tiefpassfilter mit Q10
dfLPFQ10 = pd.read_csv("Data/Messung2_LPF.csv",sep=',')
fTPQ10 = np.array(dfLPFQ10['Frequency [Hz]'])
gainTPQ10=np.array(dfLPFQ10[' Amplitude [dB]'])
phaseTPQ10 = np.array(dfLPFQ10[' Phase [deg]'])

# Messwerte Hochpassfilter mit Q1
dfHPFQ1 = pd.read_csv("Data/Messung1_HPF.csv",sep=',')
fHPFQ1 = np.array(dfHPFQ1['Frequency [Hz]'])
gainHPFQ1=np.array(dfHPFQ1[' Amplitude [dB]'])
phaseHPFQ1 = np.array(dfHPFQ1[' Phase [deg]'])

# Messwerte Hochpassfilter mit Q10
dfHPFQ10 = pd.read_csv("Data/Messung2_HPF.csv",sep=',')
fHPFQ10 = np.array(dfHPFQ10['Frequency [Hz]'])
gainHPFQ10=np.array(dfHPFQ10[' Amplitude [dB]'])
phaseHPFQ10 = np.array(dfHPFQ10[' Phase [deg]'])

# Messwerte Bandpassfilter mit Q1
dfBPFQ1 = pd.read_csv("Data/Messung1_BPF.csv",sep=',')
fBPFQ1 = np.array(dfBPFQ1['Frequency [Hz]'])
gainBPFQ1=np.array(dfBPFQ1[' Amplitude [dB]'])
phaseBPFQ1 = np.array(dfBPFQ1[' Phase [deg]'])

# Messwerte Bandpassfilter mit Q10
dfBPFQ10 = pd.read_csv("Data/Messung2_BPF.csv",sep=',')
fBPFQ10 = np.array(dfBPFQ10['Frequency [Hz]'])
gainBPFQ10=np.array(dfBPFQ10[' Amplitude [dB]'])
phaseBPFQ10 = np.array(dfBPFQ10[' Phase [deg]'])

# Messwerte Bandsperre mit Q1
dfBSFQ1 = pd.read_csv("Data/Messung1_BSF.csv",sep=',')
fBSFQ1 = np.array(dfBSFQ1['Frequency [Hz]'])
gainBSFQ1=np.array(dfBSFQ1[' Amplitude [dB]'])
phaseBSFQ1 = np.array(dfBSFQ1[' Phase [deg]'])

# Messwerte Bandsperre mit Q10
dfBSFQ10 = pd.read_csv("Data/Messung2_BSF.csv",sep=',')
fBSFQ10 = np.array(dfBSFQ10['Frequency [Hz]'])
gainBSFQ10=np.array(dfBSFQ10[' Amplitude [dB]'])
phaseBSFQ10 = np.array(dfBSFQ10[' Phase [deg]'])
```

```{python} 
# -----------------------------------Einladen der Simulations Werte -----------------------------------------
# Werte für die Tiefpassfilter mit güte 1
filepath1 = './spice_kicad/FSQ1.raw'
l1 = Ltspice(filepath1)
l1.parse() # Data loading sequence. It may take few minutes for huge file.

f1 = l1.get_frequency()
Vbpf1 = l1.get_data('v(bpf)')
Vbsf1 = l1.get_data('v(bsf)')
Vhpf1 = l1.get_data('v(hpf)')
Vlpf1 = l1.get_data('v(lpf)')

# Werte für die Tiefpassfilter mit güte 10

filepath10 = './spice_kicad/FSQ10.raw'
l2 = Ltspice(filepath10)
l2.parse()

f2 = l2.get_frequency()
Vbpf10 = l2.get_data('v(bpf)')
Vbsf10 = l2.get_data('v(bsf)')
Vhpf10 = l2.get_data('v(hpf)') 
Vlpf10 = l2.get_data('v(lpf)')
```


```{python}

def H_LPF3(f, Q, H0, f0):
    """
    Berechnet den Frequenzgang H_BW3(f) eines Bandpassfilters 3. Ordnung.

    Parameter:
    f : float oder ndarray - Frequenz (Hz)
    Q : float              - Gütefaktor
    H0 : float             - Verstärkung
    f0 : float             - Mittenfrequenz (Hz)

    Rückgabewert:
    complex oder ndarray - Frequenzgang bei f
    """
    s = 1j * 2 * np.pi * f
    w0 = 2 * np.pi * f0

    numerator = H0 * w0**3
    denominator = (s**3
                   + s**2 * (w0 + w0 / Q)
                   + s * ((w0**2) / Q + w0**2)
                   + w0**3)

    return numerator / denominator

def H_BP2(f, Q, H0, f0):
    """
    Berechnet den Frequenzgang H_BP2(f) eines Bandpassfilters 2. Ordnung.

    Parameter:
    f : float oder ndarray - Frequenz (Hz)
    Q : float              - Gütefaktor
    H0 : float             - Verstärkung
    f0 : float             - Mittenfrequenz (Hz)

    Rückgabewert:
    complex oder ndarray - Frequenzgang bei f
    """
    s = 1j * 2 * np.pi * f
    w0 = 2 * np.pi * f0

    numerator = H0 * (s / w0)
    denominator = (s**2 / w0**2) + 1 + (s / (w0 * Q))

    return numerator / denominator

def H_LP2(f, Q, H0, f0):
    """
    Berechnet den Frequenzgang H_LP2(f) eines Tiefpassfilters 2. Ordnung.

    Parameter:
    f : float oder ndarray - Frequenz (Hz)
    Q : float              - Gütefaktor
    H0 : float             - Verstärkung
    f0 : float             - Grenzfrequenz (Hz)

    Rückgabewert:
    complex oder ndarray - Frequenzgang bei f
    """
    s = 1j * 2 * np.pi * f
    w0 = 2 * np.pi * f0

    denominator = (s**2 / w0**2) + 1 + (s / (w0 * Q))
    return H0 / denominator

def H_BS(f, H0, f0, Q):
    """
    Berechnet den Frequenzgang eines 2. Ordnung Notch-Filters (Bandsperre).

    Parameter:
    f : float oder ndarray - Frequenz in Hz
    H0 : float             - Verstärkung
    f0 : float             - Sperrfrequenz in Hz
    Q : float              - Gütefaktor

    Rückgabe:
    complex oder ndarray  - Frequenzgang bei f
    """
    w0 = 2 * np.pi * f0
    s = 1j * 2 * np.pi * f

    numerator = H0 * (1 + (s**2) / (w0**2))
    denominator = (s**2 / w0**2) + 1 + (s / (w0 * Q))

    return numerator / denominator

def H_HP2(f, H0, f0, Q):
    """
    Berechnet den Frequenzgang eines 2. Ordnung Hochpassfilters.

    Parameter:
    f : float oder ndarray - Frequenz (Hz)
    H0 : float             - Verstärkung
    f0 : float             - Grenzfrequenz (Hz)
    Q : float              - Gütefaktor

    Rückgabe:
    complex oder ndarray - Frequenzgang bei f
    """
    w0 = 2 * np.pi * f0
    s = 1j * 2 * np.pi * f

    numerator = H0 * (s**2) / (w0**2)
    denominator = (s**2 / w0**2) + 1 + (s / (w0 * Q))

    return numerator / denominator



```

### Tiefpassfilter
In @fig-DiskretTiefpassfilter 
```{python}
#| label: fig-DiskretTiefpassfilterAmp
#| fig-cap: "Amplitudengang des Tiefpassfilters"
fHThe = np.logspace(1,6,10000)

Xachse = "Frequenz [Hz]" 
YAchseAmp = "Amplitude [dB]"
YAchsePhase = "Phase [°]"

HQ1_159_155 = H_LP2(fHThe, 1, 1,159.155)
HQ2_1591_55 = H_LP2(fHThe,10,1,1591.55)

plt.figure("Amplitudengang des Tiefpass filters")
plt.title("Amplitudengang des Tiefpassfilters")


plt.plot(f1,20*np.log10(abs(Vlpf1)),label="Q1 TP Simulation")
plt.plot(f2,20*np.log10(abs(Vlpf10)),label="Q10 TP Simulation")
plt.plot(fTPQ1,gainTPQ1,".:",label='Tiefpassfilter gemessen Q1')
plt.plot(fTPQ10,gainTPQ10,".:",label='Tiefpassfilter gemessen Q10')

plt.plot(fHThe,20*np.log10(abs(HQ1_159_155)),label = "Übertragungsfunktion Q1")
plt.plot(fHThe,20*np.log10(abs(HQ2_1591_55)),label = "Übertragungsfunktion Q10")

plt.xlabel(Xachse)
plt.ylabel(YAchseAmp)

plt.vlines(159.155,-150,10,colors="magenta")
plt.vlines(1591.55,-150,20,colors="magenta")

plt.xscale('log')
plt.grid()
plt.legend()
plt.show()
```


```{python}
#| label: fig-DiskretTiefpassfilterPhase
#| fig-cap: "Phasenengang des Tiefpassfilters"

plt.figure("Phasengang des Tiefpass filters")
plt.title("Phasengang des Tiefpass filters")
plt.plot(f1,np.degrees(np.unwrap(np.angle(Vlpf1))),label="Q1 TP Simulation")
plt.plot(f2,np.degrees(np.unwrap(np.angle(Vlpf10))),label="Q10 TP Simulation")

plt.plot(fTPQ1,np.degrees(np.unwrap(np.deg2rad(phaseTPQ1))),".:",label='Tiefpassfilter gemessen Q1')
plt.plot(fTPQ10,np.degrees(np.unwrap(np.deg2rad(phaseTPQ10))),".:",label='Tiefpassfilter gemessen Q10')

plt.plot(fHThe,np.rad2deg(np.unwrap(np.angle(HQ1_159_155))),label = "Übertragungsfunktion")
plt.plot(fHThe,np.rad2deg(np.unwrap(np.angle(HQ2_1591_55))),label = "Übertragungsfunktion")

plt.xlabel(Xachse)
plt.ylabel(YAchsePhase)

plt.xscale('log')
plt.grid()
plt.legend()
plt.show()
```

### Hochpassfilter
```{python}
#| label: fig-DiskretHochpassfilterAmp
#| fig-cap: "Amplitudengang des Hochpassfilters"


HQ1_159_155 = H_HP2(fHThe, 1,159.155,1)
HQ2_1591_55 = H_HP2(fHThe,1,1591.55,10)


plt.figure("Amplitudengang des Hochpassfilters")
plt.title("Amplitudengang des Hochpassfilters")

plt.plot(f1,20*np.log10(abs(Vhpf1)),label="Q1 HP Simulation")
plt.plot(f2,20*np.log10(abs(Vhpf10)),label="Q10 HP Simulation")

plt.plot(fHPFQ1,gainHPFQ1,".:",label='Hochpassfilter gemessen Q1')
plt.plot(fHPFQ10,gainHPFQ10,".:",label='Hochpassfilter gemessen Q10')

plt.plot(fHThe,20*np.log10(abs(HQ1_159_155)),label = "Übertragungsfunktion Q1")
plt.plot(fHThe,20*np.log10(abs(HQ2_1591_55)),label = "Übertragungsfunktion Q10")

plt.vlines(159.155,-150,10,colors="magenta")
plt.vlines(1591.55,-150,20,colors="magenta")

plt.xlabel(Xachse)
plt.ylabel(YAchseAmp)

plt.xscale('log')
plt.grid()
plt.legend()
plt.show()
```


```{python}
#| label: fig-DiskretHochpassfilterPhase
#| fig-cap: "Phasenengang des Hochpassfilters"

plt.figure("Phasengang des Hochpassfilters")
plt.title("Phasengang des Hochpassfilters")
plt.plot(f1,np.degrees(np.unwrap(np.angle(Vhpf1))),label="Q1 HP Simulation")
plt.plot(f2,np.degrees(np.unwrap(np.angle(Vhpf10))),label="Q10 HP Simulation")

plt.plot(fHPFQ1,np.rad2deg(np.unwrap(np.deg2rad(phaseHPFQ1))),".:",label='Hochpassfilter gemessen Q1')
plt.plot(fHPFQ10,np.rad2deg(np.unwrap(np.deg2rad(phaseHPFQ10))),".:",label='Hochpassfilter gemessen Q10')

plt.plot(fHThe,np.rad2deg(np.unwrap(np.angle(HQ1_159_155))),label = "Übertragungsfunktion")
plt.plot(fHThe,np.rad2deg(np.unwrap(np.angle(HQ2_1591_55))),label = "Übertragungsfunktion")

plt.xlabel(Xachse)
plt.ylabel(YAchsePhase)


plt.xscale('log')
plt.grid()
plt.legend()
plt.show()
```

### Bandpassfilter
```{python}
#| label: fig-DiskretBandpassfilterAmp
#| fig-cap: "Amplitudengang des Bandpassfilters"

#H_BP2(f, Q, H0, f0)

# H_BP2(f, Q, H0, f0):

HQ1_159_155 = H_BP2(fHThe, 1,1,159.155)
HQ2_1591_55 = H_BP2(fHThe,10,1,1591.55)


plt.figure("Amplitudengang des Bandpassfilters")
plt.title("Amplitudengang des Bandpassfilters")

plt.vlines(159.155,-150,10,colors="magenta")
plt.vlines(1591.55,-150,20,colors="magenta")

plt.plot(f1,20*np.log10(abs(Vbpf1)),label="Q1 BPF Simulation")
plt.plot(f2,20*np.log10(abs(Vbpf10)),label="Q10 BPF Simulation")

plt.plot(fHThe,20*np.log10(abs(HQ1_159_155)),label = "Übertragungsfunktion Q1")
plt.plot(fHThe,20*np.log10(abs(HQ2_1591_55)),label = "Übertragungsfunktion Q10")


plt.plot(fBPFQ1,gainBPFQ1,".:",label='Bandpassfilter gemessen Q1')
plt.plot(fBPFQ10,gainBPFQ10,".:",label='Bandpassfilter gemessen Q10')

plt.xlabel(Xachse)
plt.ylabel(YAchseAmp)

plt.xscale('log')
plt.grid()
plt.legend()
plt.show()
```

```{python}
#| label: fig-DiskretBandpassfilterPhase
#| fig-cap: "Phasengang des Bandpassfilters"

plt.figure("Phasengang des Bandpassfilters")
plt.title("Phasengang des Bandpassfilters")

plt.plot(f1,np.degrees(np.unwrap(np.angle(Vbpf1))),".:",label="Q1 BPF Simulation")
plt.plot(f2,np.degrees(np.unwrap(np.angle(Vbpf10))),".:",label="Q10 BPF Simulation")

plt.plot(fBPFQ1,np.rad2deg(np.unwrap(np.deg2rad(phaseBPFQ1))),label='Bandpassfilter gemessen Q1')
plt.plot(fBPFQ10,np.rad2deg(np.unwrap(np.deg2rad(phaseBPFQ10))),label='Bandpassfilter gemessen Q10')

plt.plot(fHThe,np.rad2deg(np.unwrap(np.angle(HQ1_159_155))),label = "Übertragungsfunktion")
plt.plot(fHThe,np.rad2deg(np.unwrap(np.angle(HQ2_1591_55))),label = "Übertragungsfunktion")

plt.xlabel(Xachse)
plt.ylabel(YAchsePhase)


plt.xscale('log')
plt.grid()
plt.legend()
plt.show()
```

### Bandstopfilter

```{python}
#| label: fig-DiskretBandstopfilterAmp
#| fig-cap: "Amplitudengang des Bandstopfilters"

#H_BS(f, H0, f0, Q)

HQ1_159_155 = H_BS(fHThe, 1,159.155,1)
HQ2_1591_55 = H_BS(fHThe,1,1591.55,10)

plt.figure("Amplitudengang des Bandstopfilters")
plt.title("Amplitudengang des Bandstopfilters")

plt.plot(f1,20*np.log10(abs(Vbsf1)),".:",label="Q1 BSF Simulation")
plt.plot(f2,20*np.log10(abs(Vbsf10)),".:",label="Q10 BSF Simulation")


plt.plot(fBSFQ1,gainBSFQ1,label='Bandstopfilter gemessen Q1')
plt.plot(fBSFQ10,gainBSFQ10,label='Bandstopfilter gemessen Q10')

plt.plot(fHThe,20*np.log10(abs(HQ1_159_155)),label = "Übertragungsfunktion Q1")
plt.plot(fHThe,20*np.log10(abs(HQ2_1591_55)),label = "Übertragungsfunktion Q10")

plt.vlines(159.155,-150,10,colors="magenta")
plt.vlines(1591.55,-150,20,colors="magenta")

plt.xlabel(Xachse)
plt.ylabel(YAchseAmp)

plt.xscale('log')
plt.grid()
plt.legend()
plt.show()
```

```{python}
#| label: fig-DiskretBandstopfilterPhase
#| fig-cap: "Phasenengang des Bandstopfilters"

plt.figure("Phasengang des Bandstopfilters")
plt.title("Phasengang des Bandstopfilters")

plt.plot(f1,np.degrees(np.unwrap(np.angle(Vbsf1))),".:",label="Q1 BSF Simulation")
plt.plot(f2,np.degrees(np.unwrap(np.angle(Vbsf10))),".:",label="Q10 BSF Simulation")

# plt.plot(fBSFQ1,phaseBSFQ1,label='Bandstopfilter gemessen Q1')
# plt.plot(fBSFQ10,phaseBSFQ10,label='Bandstopfilter gemessen Q10')

plt.plot(fBSFQ1,np.rad2deg(np.unwrap(np.deg2rad(phaseBSFQ1))),label='Bandpassfilter gemessen Q1')
plt.plot(fBSFQ10,np.rad2deg(np.unwrap(np.deg2rad(phaseBSFQ10))),label='Bandpassfilter gemessen Q10')

plt.plot(fHThe,np.rad2deg(np.unwrap(np.angle(HQ1_159_155))),label = "Übertragungsfunktion")
plt.plot(fHThe,np.rad2deg(np.unwrap(np.angle(HQ2_1591_55))),label = "Übertragungsfunktion")

plt.xlabel(Xachse)
plt.ylabel(YAchsePhase)


plt.xscale('log')
plt.grid()
plt.legend()
plt.show()
```

```{python} 
# Einladen der Messwerte
# ----- Butter1uF ------------- 
Butter1uF = pd.read_csv("./Data/4.5_1uF_Data.csv",sep=',')
fButter1uf = np.array(Butter1uF['Frequency [Hz]'])
gain1uf=np.array(Butter1uF[' Amplitude [dB]'])
phase1uf = np.array(Butter1uF[' Phase [deg]'])

# ------Butter 0.1 uF ---------- 
Butter01uF = pd.read_csv("./Data/4.5_0.1uF_Data.csv",sep=',')
fButter01uf = np.array(Butter01uF['Frequency [Hz]'])
gain01uf=np.array(Butter01uF[' Amplitude [dB]'])
phase01uf = np.array(Butter01uF[' Phase [deg]'])

# ------Butter 0.01uF -------- f0 = 
Butter001uF = pd.read_csv("./Data/4.5_0.01uf_Data.csv",sep=',')
fButter001uf = np.array(Butter001uF['Frequency [Hz]'])
gain001uf=np.array(Butter001uF[' Amplitude [dB]'])
phase001uf = np.array(Butter001uF[' Phase [deg]'])

```
```{python}
# Einladen der Simuliertenwerte

# Werte aus der Simulation mit 1 uF  
filepath3 = './spice_kicad/Butterworththirdorder1u.raw'
l3 = Ltspice(filepath3)
l3.parse() # Data loading sequence. It may take few minutes for huge file.

f3 = l3.get_frequency()
Vbpf3 = l3.get_data('v(bpf)')
Vbsf3 = l3.get_data('v(bsf)')
Vhpf3 = l3.get_data('v(hpf)')
Vlpf3 = l3.get_data('v(lpf)')
Vout1u  = l3.get_data('v(Vout)') 

# Werte aus der Simulation mit 0.1 uF

filepath4 = './spice_kicad/Butterworththirdorder0.1u.raw'
l4 = Ltspice(filepath4)
l4.parse() # Data loading sequence. It may take few minutes for huge file.

f4 = l4.get_frequency()
Vbpf4 = l4.get_data('v(bpf)')
Vbsf4 = l4.get_data('v(bsf)')
Vhpf4 = l4.get_data('v(hpf)')
Vlpf4 = l4.get_data('v(lpf)')
Vout01u  = l4.get_data('v(Vout)') 

# Werte aus der Simulation mit 0.01 uF

filepath5 = './spice_kicad/Butterworththirdorder0.01u.raw'
l5 = Ltspice(filepath5)
l5.parse() # Data loading sequence. It may take few minutes for huge file.

f5 = l5.get_frequency()
Vbpf5 = l5.get_data('v(bpf)')
Vbsf5 = l5.get_data('v(bsf)')
Vhpf5 = l5.get_data('v(hpf)')
Vlpf5 = l5.get_data('v(lpf)')
Vout001u  = l5.get_data('v(Vout)') 

```

```{python}
# Einladen der Theorehtischen werte aus der Übertragungsfunktion
# ----- Butter1uF ------------- 
Butterscipy1uF = pd.read_csv("./PythonData/Butterworth1uF.csv",sep=',')
fButterscipy1uf = np.array(Butterscipy1uF['Frequency [Hz]'])
gainscipy1uf=np.array(Butterscipy1uF['Amplitude [dB]'])
phasescipy1uf = np.array(Butterscipy1uF['Phase [deg]'])

# ------Butter 0.1 uF ---------- 
Butterscipy01uF = pd.read_csv("./PythonData/Butterworth0.1uF.csv",sep=',')
fButterscipy01uf = np.array(Butterscipy01uF['Frequency [Hz]'])
gainscipy01uf=np.array(Butterscipy01uF['Amplitude [dB]'])
phasescipy01uf = np.array(Butterscipy01uF['Phase [deg]'])

# ------Butter 0.01uF -------- f0 = 
Butterscipy001uF = pd.read_csv("./PythonData/Butterworth0.01uF.csv",sep=',')
fButterscipy001uf = np.array(Butterscipy001uF['Frequency [Hz]'])
gainscipy001uf=np.array(Butterscipy001uF['Amplitude [dB]'])
phasescipy001uf = np.array(Butterscipy001uF['Phase [deg]'])

```


### Butterworth 1uF
Wie in Abbildung @fig-butterworthamp und @fig-butterworthphase gezeigt, ...

```{python}
#| label: fig-butterworthamp1ufamp
#| fig-cap: "Amplitudengang des Butterworth-Tiefpassfilters mit 1 µF"

plt.figure("Amplitudengang Butterworth TP 1uF")
plt.title("Amplitudengang Butterworth 1uF")
plt.plot(f3,20*np.log10(abs(Vout1u)),".:",label="Simulation")

plt.plot(fButter1uf,gain1uf,label='Tiefpassfilter gemessen')
plt.plot(fButterscipy1uf,gainscipy1uf,label="Scipy Übertragungsfunktion")

plt.vlines(159.155,-150,10,colors="magenta")

plt.xlabel(Xachse)
plt.ylabel(YAchseAmp)

plt.xscale('log')
plt.grid()
plt.legend()
plt.show()
```

```{python}
#| label: fig-butterworthphase1ufphase
#| fig-cap: "Phasengang des Butterworth-Tiefpassfilters mit 1 µF"

plt.figure("Phasengang Butterworth TP 1uF")
plt.title("Phasengang Butterworth 1uF")
plt.plot(f3,np.degrees(np.unwrap(np.angle(Vout1u))),".:",label="Simulation")
plt.plot(fButter1uf,np.rad2deg(np.unwrap(np.deg2rad(phase1uf))),label='Butterworth gemessen')

plt.plot(fButterscipy1uf,np.rad2deg(np.unwrap(np.deg2rad(phasescipy1uf))),label="Scipy Übertragungsfunktion")

plt.xlabel(Xachse)
plt.ylabel(YAchsePhase)

plt.xscale('log')
plt.grid()
plt.legend()
plt.show()
```
### Butterworthfilter 0.1uF
```{python}
#| label: fig-butterworthphase01ufamp
#| fig-cap: "Amplitudengang des Butterworth-Tiefpassfilters mit 0,1 µF"

plt.figure("Amplitudengang Butterworth TP 0.1uF")
plt.title("Amplitudengang Butterworth 0.1uF")
plt.plot(f4,20*np.log10(abs(Vout01u)),".:",label="Simulation")
plt.plot(fButter01uf,gain01uf,label='Tiefpassfilter gemessen')
plt.plot(fButterscipy01uf,gainscipy01uf,label="Scipy Übertragungsfunktion")

plt.vlines(1591.55,-150,10,colors="magenta")

plt.xlabel(Xachse)
plt.ylabel(YAchseAmp)

plt.xscale('log')
plt.grid()
plt.legend()
plt.show()
```

```{python}
#| label: fig-butterworthphase01ufphase
#| fig-cap: "Phasengang des Butterworth-Tiefpassfilters mit 0,1 µF"

plt.figure("Phasengang Butterworth TP 0.1uF")
plt.title("Phasengang Butterworth 0.1uF")
plt.plot(f4,np.degrees(np.unwrap(np.angle(Vout01u))),".:",label="Simulation")

plt.plot(fButter01uf,np.degrees(np.unwrap(np.deg2rad(phase01uf))),label='Butterworth gemessen')


plt.plot(fButterscipy01uf,np.rad2deg(np.unwrap(np.deg2rad(phasescipy01uf))),label="Scipy Übertragungsfunktion")

plt.xlabel(Xachse)
plt.ylabel(YAchsePhase)


plt.xscale('log')
plt.grid()
plt.legend()
plt.show()
```
### Butterworthfilter 0.01uF

```{python}
#| label: fig-butterworthphase001ufamp
#| fig-cap: "Amplitudengang des Butterworth-Tiefpassfilters mit 0,01 µF"

plt.figure("Amplitudengang Butterworth TP 0.01uF")
plt.title("Amplitudengang Butterworth 0.01uF")
plt.plot(f5,20*np.log10(abs(Vout001u)),".:",label="Simulation")
plt.plot(fButter001uf,gain001uf,label='Tiefpassfilter gemessen')
plt.plot(fButterscipy001uf,gainscipy001uf,label="Scipy Übertragungsfunktion")

plt.vlines(15915.494,-150,10,colors="magenta")

plt.xlabel(Xachse)
plt.ylabel(YAchseAmp)

plt.xscale('log')
plt.grid()
plt.legend()
plt.show()
```

```{python}
#| label: fig-butterworthphase001ufphase
#| fig-cap: "Phasengang des Butterworth-Tiefpassfilters mit 0,01 µF"

plt.figure("Phasengang Butterworth TP 0.01uF")
plt.title("Phasengang Butterworth 0.01uF")

plt.plot(f5,np.degrees(np.unwrap(np.angle(Vout001u))),".:",label="Simulation")

plt.plot(fButter001uf,np.degrees(np.unwrap(np.deg2rad(phase001uf))),label='Butterworth gemessen')


plt.plot(fButterscipy001uf,np.rad2deg(np.unwrap(np.deg2rad(phasescipy001uf))),label="Scipy Übertragungsfunktion")


# plt.plot(fButter01uf,np.degrees(np.unwrap(np.deg2rad(phase01uf))),label='Butterworth gemessen')


# plt.plot(fButterscipy01uf,np.rad2deg(np.unwrap(np.deg2rad(phasescipy01uf))),label="Scipy Übertragungsfunktion")

plt.xlabel(Xachse)
plt.ylabel(YAchsePhase)


plt.xscale('log')
plt.grid()
plt.legend()
plt.show()
```

## Messwerte der PCB-Schaltung
<!--Comp-->
Im Folgenden sind alle Messungen der PCB-Schaltung sowie der direkte Vergleich zwischen Simulation und theoretischer Übertragungsfunktion dargestellt.

```{python}
import scipy.signal as sig
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

kondensatoren = ["1uF","100nF","10nF"]

Rcom = 1000 # Angenomener widerstand für alle Messungen (Rcom der Schaltung)

kondensatortenzahl = np.array([1e-6,100e-9,10e-9])

guetezahl = np.array([1,10])

H0 = 1

guete = ["1Q","10Q"]

messung = ["BPF2","LPF2","HPF2","BSF2","LPF3"]

Anzahl = len(kondensatoren)*len(guete)*len(messung)

f_ue = np.logspace(1,6,10000)

for f,cwert in enumerate(kondensatoren):
    for s,gueteval in enumerate(guete):
        
        filepath3 = './spice_kicad/Kicad_PCB_Simulation/Butterworththirdorder'+cwert+gueteval+'.raw'
        l3 = Ltspice(filepath3)
        l3.parse() # Data loading sequence. It may take few minutes for huge file.

        fKicad = l3.get_frequency()
        VbpfKicad = l3.get_data('v(bpf)')
        VbsfKicad = l3.get_data('v(bsf)')
        VhpfKicad = l3.get_data('v(hpf)')
        Vlpf2Kicad = l3.get_data('v(lpf)')
        Vlpf3Kicad  = l3.get_data('v(Vout)') # Dies ist der Spannungswert für den LPF Dritterordnug


        for i,FilterTyp in enumerate(messung):
            f0 = 1/((Rcom*kondensatortenzahl[f])*2*np.pi)
                    
            # Case Anweisung für die Plots
            match FilterTyp:
                case "BPF2":
                    # Theorehtische Übertragungsfunktion
                    HE = H_BP2(f_ue,guetezahl[s],H0,f0)
                    # Kicad Simulation
                    Vkicad = VbpfKicad

                case "LPF2":
                    # Theorehtische Übertragungsfunktion
                    HE = H_LP2(f_ue,guetezahl[s],H0,f0)
                    # Kicad Simulation
                    Vkicad = Vlpf2Kicad

                case "HPF2":
                    # Theorehtische Übertragungsfunktion
                    HE = H_HP2(f_ue, H0, f0, guetezahl[s])
                    # Kicad Simulation
                    Vkicad = VhpfKicad
                case "BSF2":
                    # Theorehtische Übertragungsfunktion
                    HE = H_BS(f_ue, H0, f0, guetezahl[s])
                    # Kicad Simulation
                    Vkicad = VbsfKicad
                case "LPF3":
                    # Theorehtische Übertragungsfunktion        
                    HE = H_LPF3(f_ue, guetezahl[s], H0, f0)
                    # Kicad Simulation
                    Vkicad = Vlpf3Kicad

            
            AktuelleFilter = FilterTyp+"_"+cwert+"_"+gueteval
            
            Data_IN1 = './MessungenPCB/'+AktuelleFilter+".csv"
            Data_IN2 = './MessungenPCB/'+AktuelleFilter+".csv"

            DF_IN1 = pd.read_csv(Data_IN1)
            DF_IN2 = pd.read_csv(Data_IN2)

            MAG_dB = DF_IN1[" Amplitude [dB]"]
            PHASE_deg = DF_IN1[" Phase [deg]"]
            freqsfloat = DF_IN1["Frequency [Hz]"]
            #%% Berechung der Übertragungsfunktion

            
            # Alte Plots
            # plt.figure(AktuelleFilter)
            # plt.subplot(2, 1, 1)
            # plt.title(AktuelleFilter)
            # #plt.semilogx(freqs, MAG_dB)
            # plt.plot(freqsfloat,MAG_dB)
            # plt.xscale('log')
            # plt.grid()
            # plt.ylabel('Magnitude in dB')
            # #
            # plt.subplot(2, 1, 2)
            # #plt.semilogx(freqs, PHASE_deg)
            # plt.plot(freqsfloat, PHASE_deg)
            # plt.xscale('log')
            # plt.grid()
            # plt.xlabel('f in Hz')
            # plt.ylabel('Phase in deg')
            # plt.savefig("./MessungenPCB/Figs/"+AktuelleFilter+".png")

            fig, ax1 = plt.subplots()

            # Linke Achse: Amplitude
            ax1.set_xscale('log')
            ax1.plot(freqsfloat, MAG_dB, "x-", label='Amplitudengang (dB) gemessen',color = "blue")
            ax1.plot(f_ue,20*np.log10(HE),label = "Übertragungsfunktion (db)",color = "blue")
            ax1.plot(fKicad,20*np.log10(abs(Vkicad)),"^",label = "Amplitudengang Simulation",color = "blue") # plot(f3,20*np.log10(abs(Vout1u)),".:",label="Simulation")
            ax1.set_xlabel('Frequenz [Hz]')
            ax1.set_ylabel('Amplitude [dB]', color='b')
            ax1.tick_params(axis='y', labelcolor='b')

            # Rechte Achse: Phase
            ax2 = ax1.twinx()
            ax2.plot(freqsfloat, np.rad2deg(np.unwrap(np.deg2rad(PHASE_deg))), 'x-', label='Phasengang (°) gemessen',color = "red")
            ax2.plot(f_ue,np.rad2deg(np.unwrap(np.angle(HE))),label = "Übertragungsfunktion (°)",color = "red")
            ax2.plot(fKicad,np.degrees(np.unwrap(np.angle(Vkicad))),"^",label="Simulation")
        

            ax2.set_ylabel('Phase [°]', color='r')
            ax2.tick_params(axis='y', labelcolor='r')

            # Gitter und Titel
            ax1.grid(True, which='both', linestyle='--', linewidth=0.5)
            plt.title('Amplituden- und Phasengang von '+AktuelleFilter)

            # Legenden kombinieren
            lines1, labels1 = ax1.get_legend_handles_labels()
            lines2, labels2 = ax2.get_legend_handles_labels()
            ax1.legend(lines1 + lines2, labels1 + labels2, loc='best')

            plt.tight_layout()
plt.show()
```